function init(self)
	self.init_score = go.get("game_stats#script", "score")
	msg.post("#level_proxy", "load")
	msg.post(".", "acquire_input_focus")
end

local function load_level()
	msg.post("#level_proxy", "load")
end

local function restart_level()
	local proxy = msg.url("#level_proxy")
	timer.delay(3, false, function(self, handle, time_elapsed)
		msg.post(proxy, "disable")
		msg.post(proxy, "final")
		msg.post(proxy, "unload")
		msg.post("gui#gui", "show_level_info")
		timer.delay(5, false, load_level)			
	end)
end

local function update_score(value)
	local new_score = go.get("game_stats#script", "score") + value
	msg.post("gui#gui", "update_score", { new_score =  new_score })
	go.set("game_stats#script", "score", new_score)
end

local function update_lives()
	local lives_left = go.get("game_stats#script", "lives") - 1
	msg.post("gui#gui", "update_lives", { new_value =  lives_left })
	go.set("game_stats#script", "lives", lives_left)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
		msg.post(sender, "init")
		msg.post(sender, "enable")
		msg.post("gui#gui", "hide_level_info")
	end
	
	if message_id == hash("player_lost_life") then
		update_lives()
		restart_level()
	end

	if message_id == hash("treasure_shipped") then
		update_score(10)
	end

	if message_id == hash("enemy_killed") then
		update_score(5)
	end
end