function init(self)
	msg.post(".", "acquire_input_focus")
	self.moving = false
	self.firing = false
	self.input = vmath.vector3()
	self.dir = vmath.vector3(1, 0, 0)
	self.player_faceing_left = false
	self.speed = 100
	self.stop_moving_down = false
	self.stop_moving_up = false
	self.left_side_border_x = 32
	self.right_side_border_x = tonumber(sys.get_config("display.width") - 32)
	self.bullet_timeout = 0 -- how often a player can shoot
	self.reload_time = 20
	self.can_shoot = true
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	end

	if self.firing then
		spawn_bullet(self)
	end

	if self.bullet_timeout == self.reload_time then
		self.can_shoot = true
	else
		self.can_shoot = false
		self.bullet_timeout = self.bullet_timeout + 1
	end

	self.input.y = 0
	self.input.x = 0
	self.moving = false
	self.firing = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		if message.enter then			
			if self.dir.y < 0 then
				self.stop_moving_down = true
			else
				self.stop_moving_up = true
			end
		else
			self.stop_moving_down = false
			self.stop_moving_up = false
		end
	end
end

function on_input(self, action_id, action)
	local pos = go.get_position()

	if action_id == hash("up") and not self.stop_moving_up then
		self.input.y = 1
	elseif action_id == hash("down") and not self.stop_moving_down then
		self.input.y = -1
	elseif action_id == hash("left") and pos.x >= self.left_side_border_x then
		self.player_faceing_left = true
		sprite.set_hflip("player#sprite", true)
		self.input.x = -1
	elseif action_id == hash("right") and pos.x <= self.right_side_border_x then
		sprite.set_hflip("player#sprite", false)
		self.player_faceing_left = false
		self.input.x = 1
	elseif action_id == hash("fire") and action.pressed then
		if self.can_shoot == true then
			msg.post("#shoot_sound", "play_sound")
			self.bullet_timeout = 0
			self.firing = true
		end
	end	

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

function spawn_bullet(self)
	pos = go.get_position()
	props = { player_faceing_left = self.player_faceing_left }
	player_dir = self.player_faceing_left and -1 or 1
	bullet_x_pos = pos.x + (10 * player_dir) -- we multiply by -1 or 1 in order spawn bullet from left (-10 form player position) or right +10 from player.x
	factory.create("#bullet_factory", vmath.vector3(bullet_x_pos, pos.y + 6, 0), rot, props)
end