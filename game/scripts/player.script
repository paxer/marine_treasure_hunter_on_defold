function init(self)
	msg.post(".", "acquire_input_focus")
	draw_hose(self)
	self.moving = false
	self.firing = false
	self.input = vmath.vector3()
	self.dir = vmath.vector3(1, 0, 0)
	self.player_faceing_left = false
	self.speed = 100
	self.stop_moving_down = false
	self.stop_moving_up = false
	self.left_side_border_x = 32
	self.right_side_border_x = tonumber(sys.get_config("display.width") - 32)
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	end

	if self.firing then
		spawn_bullet(self)
	end

	self.input.y = 0
	self.input.x = 0
	self.moving = false
	self.firing = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		if message.enter then			
			if self.dir.y < 0 then
				self.stop_moving_down = true
			else
				self.stop_moving_up = true
			end
		else
			self.stop_moving_down = false
			self.stop_moving_up = false
		end
	end
end

function on_input(self, action_id, action)
	local pos = go.get_position()

	if action_id == hash("up") and not self.stop_moving_up then
		self.input.y = 1
	elseif action_id == hash("down") and not self.stop_moving_down then
		self.input.y = -1
	elseif action_id == hash("left") and pos.x >= self.left_side_border_x then
		self.player_faceing_left = true
		sprite.set_hflip("player#sprite", true)
		self.input.x = -1
	elseif action_id == hash("right") and pos.x <= self.right_side_border_x then
		sprite.set_hflip("player#sprite", false)
		self.player_faceing_left = false
		self.input.x = 1
	elseif action_id == hash("fire") and action.pressed then
		self.firing = true
	end	

	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input) -- we may need to remove normalize as it slow down diagonal movment
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

function spawn_bullet(self)
	pos = go.get_position()
	props = { dir = self.dir, player_faceing_left = self.player_faceing_left }
	player_dir = self.player_faceing_left and -1 or 1
	bullet_x_pos = pos.x + (10 * player_dir) -- we multiply by -1 or 1 in order spawn bullet from left (-10 form player position) or right +10 from player.x
	factory.create("#bullet_factory", vmath.vector3(bullet_x_pos, pos.y + 6, 0), rot, props)
end

function draw_hose(self)
	ship_pos = go.get_position("ship")
	player_pos = go.get_position()
	
	y_distance_beween_ship_and_player = ship_pos.y - player_pos.y
	hose_segment_height = 15
	hose_segments_between_player_and_ship = math.floor(y_distance_beween_ship_and_player / hose_segment_height)
	
	pprint(hose_segments_between_player_and_ship)

	start_hose_segment_y_pos = ship_pos.y - 28
	for i = 1, hose_segments_between_player_and_ship do
		start_hose_segment_y_pos = start_hose_segment_y_pos - 12
		factory.create("#hose_factory", vmath.vector3(ship_pos.x, start_hose_segment_y_pos, 1), nil, nil)
		pprint(i)
	end
end